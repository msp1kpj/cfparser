/*===TOKENS===*/
COMPONENT                <component>
'{'                      <{>
PRIVATE                  <private>
IDENTIFIER               <void>
FUNCTION                 <function>
IDENTIFIER               <compileSource>
'('                      <(>
')'                      <)>
IDENTIFIER               <hint>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <compile dynamic source>
CLOSE_STRING             <">
'{'                      <{>
VAR                      <var>
IDENTIFIER               <dir>
'='                      <=>
INTEGER_LITERAL          <0>
';'                      <;>
VAR                      <var>
IDENTIFIER               <path>
'='                      <=>
INTEGER_LITERAL          <0>
';'                      <;>
VAR                      <var>
IDENTIFIER               <paths>
'='                      <=>
INTEGER_LITERAL          <0>
';'                      <;>
VAR                      <var>
FILE                     <file>
'='                      <=>
INTEGER_LITERAL          <0>
';'                      <;>
VAR                      <var>
IDENTIFIER               <counter>
'='                      <=>
INTEGER_LITERAL          <1>
';'                      <;>
VAR                      <var>
IDENTIFIER               <len>
'='                      <=>
INTEGER_LITERAL          <0>
';'                      <;>
VAR                      <var>
IDENTIFIER               <directories>
'='                      <=>
INTEGER_LITERAL          <0>
';'                      <;>
LINE_COMMENT             <//do check to see if the compiled jar is already there
>
VAR                      <var>
IDENTIFIER               <jarName>
'='                      <=>
IDENTIFIER               <calculateJarName>
'('                      <(>
IDENTIFIER               <getSourceDirectories>
'('                      <(>
')'                      <)>
')'                      <)>
';'                      <;>
VAR                      <var>
IDENTIFIER               <jar>
'='                      <=>
IDENTIFIER               <getCompileDirectory>
'('                      <(>
')'                      <)>
'&'                      <&>
OPEN_STRING              <">
STRING_LITERAL           </>
CLOSE_STRING             <">
'&'                      <&>
IDENTIFIER               <jarName>
';'                      <;>
IF                       <if>
'('                      <(>
IDENTIFIER               <fileExists>
'('                      <(>
IDENTIFIER               <jar>
')'                      <)>
')'                      <)>
'{'                      <{>
IF                       <if>
'('                      <(>
IDENTIFIER               <isTrustedSource>
'('                      <(>
')'                      <)>
')'                      <)>
'{'                      <{>
ML_COMMENT               </* add that jar to the classloader */>
FILE                     <file>
'='                      <=>
IDENTIFIER               <createObject>
'('                      <(>
OPEN_STRING              <">
STRING_LITERAL           <java>
CLOSE_STRING             <">
','                      <,>
OPEN_STRING              <">
STRING_LITERAL           <java.io.File>
CLOSE_STRING             <">
')'                      <)>
'.'                      <.>
IDENTIFIER               <init>
'('                      <(>
IDENTIFIER               <jar>
')'                      <)>
';'                      <;>
IDENTIFIER               <getURLClassLoader>
'('                      <(>
')'                      <)>
'.'                      <.>
IDENTIFIER               <addURL>
'('                      <(>
FILE                     <file>
'.'                      <.>
IDENTIFIER               <toURL>
'('                      <(>
')'                      <)>
')'                      <)>
';'                      <;>
RETURN                   <return>
';'                      <;>
'}'                      <}>
ELSE                     <else>
'{'                      <{>
FILE                     <file>
IDENTIFIER               <action>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <delete>
CLOSE_STRING             <">
FILE                     <file>
'='                      <=>
OPEN_STRING              <">
'#'                      <#>
IDENTIFIER               <jar>
'#'                      <#>
CLOSE_STRING             <">
'{'                      <{>
'}'                      <}>
';'                      <;>
'}'                      <}>
'}'                      <}>
TRY                      <try>
'{'                      <{>
IDENTIFIER               <path>
'='                      <=>
IDENTIFIER               <getCompileDirectory>
'('                      <(>
')'                      <)>
'&'                      <&>
OPEN_STRING              <">
STRING_LITERAL           </>
CLOSE_STRING             <">
'&'                      <&>
IDENTIFIER               <createUUID>
'('                      <(>
')'                      <)>
';'                      <;>
DIRECTORY                <directory>
IDENTIFIER               <action>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <create>
CLOSE_STRING             <">
DIRECTORY                <directory>
'='                      <=>
OPEN_STRING              <">
'#'                      <#>
IDENTIFIER               <path>
'#'                      <#>
CLOSE_STRING             <">
'{'                      <{>
'}'                      <}>
';'                      <;>
LINE_COMMENT             <//first we copy the source to our tmp dir
>
IDENTIFIER               <directories>
'='                      <=>
IDENTIFIER               <getSourceDirectories>
'('                      <(>
')'                      <)>
';'                      <;>
IDENTIFIER               <len>
'='                      <=>
IDENTIFIER               <arraylen>
'('                      <(>
IDENTIFIER               <directories>
')'                      <)>
';'                      <;>
FOR                      <for>
'('                      <(>
';'                      <;>
IDENTIFIER               <counter>
LTE                      <lte>
IDENTIFIER               <len>
';'                      <;>
IDENTIFIER               <counter>
'='                      <=>
IDENTIFIER               <counter>
'+'                      <+>
INTEGER_LITERAL          <1>
')'                      <)>
'{'                      <{>
IDENTIFIER               <dir>
'='                      <=>
IDENTIFIER               <directories>
'['                      <[>
IDENTIFIER               <counter>
']'                      <]>
';'                      <;>
IDENTIFIER               <$directoryCopy>
'('                      <(>
IDENTIFIER               <dir>
','                      <,>
IDENTIFIER               <path>
')'                      <)>
';'                      <;>
'}'                      <}>
LINE_COMMENT             <//then we compile it, and grab that jar
>
IDENTIFIER               <paths>
'='                      <=>
IDENTIFIER               <ArrayNew>
'('                      <(>
INTEGER_LITERAL          <1>
')'                      <)>
';'                      <;>
LINE_COMMENT             <//have to write it this way so CF7 compiles
>
IDENTIFIER               <ArrayAppend>
'('                      <(>
IDENTIFIER               <paths>
','                      <,>
IDENTIFIER               <path>
')'                      <)>
';'                      <;>
IDENTIFIER               <jar>
'='                      <=>
IDENTIFIER               <getJavaCompiler>
'('                      <(>
')'                      <)>
'.'                      <.>
IDENTIFIER               <compile>
'('                      <(>
IDENTIFIER               <paths>
','                      <,>
IDENTIFIER               <getURLClassLoader>
'('                      <(>
')'                      <)>
','                      <,>
IDENTIFIER               <jarName>
')'                      <)>
';'                      <;>
ML_COMMENT               </* add that jar to the classloader */>
FILE                     <file>
'='                      <=>
IDENTIFIER               <createObject>
'('                      <(>
OPEN_STRING              <">
STRING_LITERAL           <java>
CLOSE_STRING             <">
','                      <,>
OPEN_STRING              <">
STRING_LITERAL           <java.io.File>
CLOSE_STRING             <">
')'                      <)>
'.'                      <.>
IDENTIFIER               <init>
'('                      <(>
IDENTIFIER               <jar>
')'                      <)>
';'                      <;>
IDENTIFIER               <getURLClassLoader>
'('                      <(>
')'                      <)>
'.'                      <.>
IDENTIFIER               <addURL>
'('                      <(>
FILE                     <file>
'.'                      <.>
IDENTIFIER               <toURL>
'('                      <(>
')'                      <)>
')'                      <)>
';'                      <;>
ML_COMMENT               </* delete the files */>
IF                       <if>
'('                      <(>
IDENTIFIER               <directoryExists>
'('                      <(>
IDENTIFIER               <path>
')'                      <)>
')'                      <)>
'{'                      <{>
DIRECTORY                <directory>
IDENTIFIER               <action>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <delete>
CLOSE_STRING             <">
IDENTIFIER               <recurse>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <true>
CLOSE_STRING             <">
DIRECTORY                <directory>
'='                      <=>
OPEN_STRING              <">
'#'                      <#>
IDENTIFIER               <path>
'#'                      <#>
CLOSE_STRING             <">
'{'                      <{>
'}'                      <}>
';'                      <;>
'}'                      <}>
ML_COMMENT               </* save the file for when trusted source is on -*/>
IF                       <if>
'('                      <(>
IDENTIFIER               <fileExists>
'('                      <(>
IDENTIFIER               <jar>
')'                      <)>
AND                      <AND>
NOT                      <NOT>
IDENTIFIER               <isTrustedSource>
'('                      <(>
')'                      <)>
')'                      <)>
'{'                      <{>
FILE                     <file>
IDENTIFIER               <action>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <delete>
CLOSE_STRING             <">
FILE                     <file>
'='                      <=>
OPEN_STRING              <">
'#'                      <#>
IDENTIFIER               <jar>
'#'                      <#>
CLOSE_STRING             <">
'{'                      <{>
'}'                      <}>
'}'                      <}>
'}'                      <}>
CATCH                    <catch>
'('                      <(>
ANY                      <any>
IDENTIFIER               <e>
')'                      <)>
'{'                      <{>
ML_COMMENT               </* make sure the files are deleted */>
IF                       <if>
'('                      <(>
IDENTIFIER               <directoryExists>
'('                      <(>
IDENTIFIER               <path>
')'                      <)>
')'                      <)>
'{'                      <{>
DIRECTORY                <directory>
IDENTIFIER               <action>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <delete>
CLOSE_STRING             <">
IDENTIFIER               <recurse>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <true>
CLOSE_STRING             <">
DIRECTORY                <directory>
'='                      <=>
OPEN_STRING              <">
'#'                      <#>
IDENTIFIER               <path>
'#'                      <#>
CLOSE_STRING             <">
'{'                      <{>
'}'                      <}>
';'                      <;>
'}'                      <}>
RETHROW                  <rethrow>
';'                      <;>
'}'                      <}>
'}'                      <}>
'}'                      <}>
'}'                      <}>
/*===TREE===*/
(scriptBlock
  (componentDeclaration
    component
    (componentGuts
      {
      (element
        (functionDeclaration
          (accessType private)
          (typeSpec (multipartIdentifier (identifier void)))
          function
          (identifier compileSource)
          (
          parameterList
          )
          (functionAttribute
            (identifier hint)
            =
            (constantExpression
              (stringLiteral " (stringLiteralPart compile dynamic source) ")
            )
          )
          (compoundStatement
            {
            (statement
              (localAssignmentExpression
                var
                (multipartIdentifier (identifier dir))
                =
                (startExpression
                  (compareExpression
                    (baseExpression (unaryExpression (primaryExpression (literalExpression 0))))
                  )
                )
              )
              ;
            )
            (statement
              (localAssignmentExpression
                var
                (multipartIdentifier (identifier path))
                =
                (startExpression
                  (compareExpression
                    (baseExpression (unaryExpression (primaryExpression (literalExpression 0))))
                  )
                )
              )
              ;
            )
            (statement
              (localAssignmentExpression
                var
                (multipartIdentifier (identifier paths))
                =
                (startExpression
                  (compareExpression
                    (baseExpression (unaryExpression (primaryExpression (literalExpression 0))))
                  )
                )
              )
              ;
            )
            (statement
              (localAssignmentExpression
                var
                (multipartIdentifier (identifier (cfmlFunction file)))
                =
                (startExpression
                  (compareExpression
                    (baseExpression (unaryExpression (primaryExpression (literalExpression 0))))
                  )
                )
              )
              ;
            )
            (statement
              (localAssignmentExpression
                var
                (multipartIdentifier (identifier counter))
                =
                (startExpression
                  (compareExpression
                    (baseExpression (unaryExpression (primaryExpression (literalExpression 1))))
                  )
                )
              )
              ;
            )
            (statement
              (localAssignmentExpression
                var
                (multipartIdentifier (identifier len))
                =
                (startExpression
                  (compareExpression
                    (baseExpression (unaryExpression (primaryExpression (literalExpression 0))))
                  )
                )
              )
              ;
            )
            (statement
              (localAssignmentExpression
                var
                (multipartIdentifier (identifier directories))
                =
                (startExpression
                  (compareExpression
                    (baseExpression (unaryExpression (primaryExpression (literalExpression 0))))
                  )
                )
              )
              ;
            )
            (statement
              (localAssignmentExpression
                var
                (multipartIdentifier (identifier jarName))
                =
                (startExpression
                  (compareExpression
                    (baseExpression
                      (unaryExpression
                        (memberExpression
                          (functionCall
                            (identifier calculateJarName)
                            (
                            (argumentList
                              (argument
                                (startExpression
                                  (compareExpression
                                    (baseExpression
                                      (unaryExpression
                                        (memberExpression
                                          (functionCall (identifier getSourceDirectories) ( argumentList ))
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
              ;
            )
            (statement
              (localAssignmentExpression
                var
                (multipartIdentifier (identifier jar))
                =
                (startExpression
                  (compareExpression
                    (baseExpression
                      (concatenationExpression
                        (unaryExpression
                          (memberExpression
                            (functionCall (identifier getCompileDirectory) ( argumentList ))
                          )
                        )
                        &
                        (baseOrTernaryExpression
                          (compareExpression
                            (baseExpression
                              (concatenationExpression
                                (unaryExpression
                                  (primaryExpression
                                    (literalExpression (stringLiteral " (stringLiteralPart /) "))
                                  )
                                )
                                &
                                (baseOrTernaryExpression
                                  (compareExpression
                                    (baseExpression (unaryExpression (memberExpression (identifier jarName))))
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
              ;
            )
            (statement
              (ifStatement
                if
                (condition
                  (
                  (compareExpression
                    (baseExpression
                      (unaryExpression
                        (memberExpression
                          (functionCall
                            (identifier fileExists)
                            (
                            (argumentList
                              (argument
                                (startExpression
                                  (compareExpression
                                    (baseExpression (unaryExpression (memberExpression (identifier jar))))
                                  )
                                )
                              )
                            )
                            )
                          )
                        )
                      )
                    )
                  )
                  )
                )
                (statement
                  (compoundStatement
                    {
                    (statement
                      (ifStatement
                        if
                        (condition
                          (
                          (compareExpression
                            (baseExpression
                              (unaryExpression
                                (memberExpression (functionCall (identifier isTrustedSource) ( argumentList )))
                              )
                            )
                          )
                          )
                        )
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (assignmentExpression
                                (startExpression
                                  (compareExpression
                                    (baseExpression
                                      (unaryExpression (memberExpression (identifier (cfmlFunction file))))
                                    )
                                  )
                                )
                                =
                                (startExpression
                                  (compareExpression
                                    (baseExpression
                                      (unaryExpression
                                        (memberExpression
                                          (functionCall
                                            (identifier createObject)
                                            (
                                            (argumentList
                                              (argument
                                                (startExpression
                                                  (compareExpression
                                                    (baseExpression
                                                      (unaryExpression
                                                        (primaryExpression
                                                          (literalExpression (stringLiteral " (stringLiteralPart java) "))
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                              ,
                                              (argument
                                                (startExpression
                                                  (compareExpression
                                                    (baseExpression
                                                      (unaryExpression
                                                        (primaryExpression
                                                          (literalExpression (stringLiteral " (stringLiteralPart java.io.File) "))
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                            )
                                          )
                                          .
                                          (functionCall
                                            (identifier init)
                                            (
                                            (argumentList
                                              (argument
                                                (startExpression
                                                  (compareExpression
                                                    (baseExpression (unaryExpression (memberExpression (identifier jar))))
                                                  )
                                                )
                                              )
                                            )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                              ;
                            )
                            (statement
                              (startExpression
                                (compareExpression
                                  (baseExpression
                                    (unaryExpression
                                      (memberExpression
                                        (functionCall (identifier getURLClassLoader) ( argumentList ))
                                        .
                                        (functionCall
                                          (identifier addURL)
                                          (
                                          (argumentList
                                            (argument
                                              (startExpression
                                                (compareExpression
                                                  (baseExpression
                                                    (unaryExpression
                                                      (memberExpression
                                                        (identifier (cfmlFunction file))
                                                        .
                                                        (functionCall (identifier toURL) ( argumentList ))
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                              ;
                            )
                            (statement (returnStatement return ;))
                            }
                          )
                        )
                        else
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (tagOperatorStatement
                                (cfmlfunctionStatement
                                  (cfmlFunction file)
                                  (paramStatementAttributes
                                    (param
                                      (multipartIdentifier (identifier action))
                                      =
                                      (startExpression
                                        (compareExpression
                                          (baseExpression
                                            (unaryExpression
                                              (primaryExpression
                                                (literalExpression (stringLiteral " (stringLiteralPart delete) "))
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (param
                                      (multipartIdentifier (identifier (cfmlFunction file)))
                                      =
                                      (startExpression
                                        (compareExpression
                                          (baseExpression
                                            (unaryExpression
                                              (primaryExpression
                                                (literalExpression
                                                  (stringLiteral
                                                    "
                                                    #
                                                    (startExpression
                                                      (compareExpression
                                                        (baseExpression (unaryExpression (memberExpression (identifier jar))))
                                                      )
                                                    )
                                                    #
                                                    "
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (compoundStatement { })
                                )
                              )
                            )
                            (statement ;)
                            }
                          )
                        )
                      )
                    )
                    }
                  )
                )
              )
            )
            (statement
              (tryCatchStatement
                try
                (statement
                  (compoundStatement
                    {
                    (statement
                      (assignmentExpression
                        (startExpression
                          (compareExpression
                            (baseExpression (unaryExpression (memberExpression (identifier path))))
                          )
                        )
                        =
                        (startExpression
                          (compareExpression
                            (baseExpression
                              (concatenationExpression
                                (unaryExpression
                                  (memberExpression
                                    (functionCall (identifier getCompileDirectory) ( argumentList ))
                                  )
                                )
                                &
                                (baseOrTernaryExpression
                                  (compareExpression
                                    (baseExpression
                                      (concatenationExpression
                                        (unaryExpression
                                          (primaryExpression
                                            (literalExpression (stringLiteral " (stringLiteralPart /) "))
                                          )
                                        )
                                        &
                                        (baseOrTernaryExpression
                                          (compareExpression
                                            (baseExpression
                                              (unaryExpression
                                                (memberExpression (functionCall (identifier createUUID) ( argumentList )))
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                      ;
                    )
                    (statement
                      (tagOperatorStatement
                        (cfmlfunctionStatement
                          (cfmlFunction directory)
                          (paramStatementAttributes
                            (param
                              (multipartIdentifier (identifier action))
                              =
                              (startExpression
                                (compareExpression
                                  (baseExpression
                                    (unaryExpression
                                      (primaryExpression
                                        (literalExpression (stringLiteral " (stringLiteralPart create) "))
                                      )
                                    )
                                  )
                                )
                              )
                            )
                            (param
                              (multipartIdentifier (identifier (cfmlFunction directory)))
                              =
                              (startExpression
                                (compareExpression
                                  (baseExpression
                                    (unaryExpression
                                      (primaryExpression
                                        (literalExpression
                                          (stringLiteral
                                            "
                                            #
                                            (startExpression
                                              (compareExpression
                                                (baseExpression (unaryExpression (memberExpression (identifier path))))
                                              )
                                            )
                                            #
                                            "
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                          (compoundStatement { })
                        )
                      )
                    )
                    (statement ;)
                    (statement
                      (assignmentExpression
                        (startExpression
                          (compareExpression
                            (baseExpression (unaryExpression (memberExpression (identifier directories))))
                          )
                        )
                        =
                        (startExpression
                          (compareExpression
                            (baseExpression
                              (unaryExpression
                                (memberExpression
                                  (functionCall (identifier getSourceDirectories) ( argumentList ))
                                )
                              )
                            )
                          )
                        )
                      )
                      ;
                    )
                    (statement
                      (assignmentExpression
                        (startExpression
                          (compareExpression
                            (baseExpression (unaryExpression (memberExpression (identifier len))))
                          )
                        )
                        =
                        (startExpression
                          (compareExpression
                            (baseExpression
                              (unaryExpression
                                (memberExpression
                                  (functionCall
                                    (identifier arraylen)
                                    (
                                    (argumentList
                                      (argument
                                        (startExpression
                                          (compareExpression
                                            (baseExpression (unaryExpression (memberExpression (identifier directories))))
                                          )
                                        )
                                      )
                                    )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                      ;
                    )
                    (statement
                      (forStatement
                        for
                        (
                        ;
                        (startExpression
                          (compareExpression
                            (baseExpression (unaryExpression (memberExpression (identifier counter))))
                            (compareExpressionOperator lte)
                            (compareExpression
                              (baseExpression (unaryExpression (memberExpression (identifier len))))
                            )
                          )
                        )
                        ;
                        (assignmentExpression
                          (startExpression
                            (compareExpression
                              (baseExpression (unaryExpression (memberExpression (identifier counter))))
                            )
                          )
                          =
                          (startExpression
                            (compareExpression
                              (baseExpression
                                (additiveExpression
                                  (unaryExpression (memberExpression (identifier counter)))
                                  +
                                  (baseOrTernaryExpression
                                    (compareExpression
                                      (baseExpression (unaryExpression (primaryExpression (literalExpression 1))))
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                        )
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (assignmentExpression
                                (startExpression
                                  (compareExpression
                                    (baseExpression (unaryExpression (memberExpression (identifier dir))))
                                  )
                                )
                                =
                                (startExpression
                                  (compareExpression
                                    (baseExpression
                                      (unaryExpression
                                        (memberExpression
                                          (identifier directories)
                                          (arrayMemberExpression
                                            [
                                            (startExpression
                                              (compareExpression
                                                (baseExpression (unaryExpression (memberExpression (identifier counter))))
                                              )
                                            )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                              ;
                            )
                            (statement
                              (startExpression
                                (compareExpression
                                  (baseExpression
                                    (unaryExpression
                                      (memberExpression
                                        (functionCall
                                          (identifier $directoryCopy)
                                          (
                                          (argumentList
                                            (argument
                                              (startExpression
                                                (compareExpression
                                                  (baseExpression (unaryExpression (memberExpression (identifier dir))))
                                                )
                                              )
                                            )
                                            ,
                                            (argument
                                              (startExpression
                                                (compareExpression
                                                  (baseExpression (unaryExpression (memberExpression (identifier path))))
                                                )
                                              )
                                            )
                                          )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                              ;
                            )
                            }
                          )
                        )
                      )
                    )
                    (statement
                      (assignmentExpression
                        (startExpression
                          (compareExpression
                            (baseExpression (unaryExpression (memberExpression (identifier paths))))
                          )
                        )
                        =
                        (startExpression
                          (compareExpression
                            (baseExpression
                              (unaryExpression
                                (memberExpression
                                  (functionCall
                                    (identifier ArrayNew)
                                    (
                                    (argumentList
                                      (argument
                                        (startExpression
                                          (compareExpression
                                            (baseExpression (unaryExpression (primaryExpression (literalExpression 1))))
                                          )
                                        )
                                      )
                                    )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                      ;
                    )
                    (statement
                      (startExpression
                        (compareExpression
                          (baseExpression
                            (unaryExpression
                              (memberExpression
                                (functionCall
                                  (identifier ArrayAppend)
                                  (
                                  (argumentList
                                    (argument
                                      (startExpression
                                        (compareExpression
                                          (baseExpression (unaryExpression (memberExpression (identifier paths))))
                                        )
                                      )
                                    )
                                    ,
                                    (argument
                                      (startExpression
                                        (compareExpression
                                          (baseExpression (unaryExpression (memberExpression (identifier path))))
                                        )
                                      )
                                    )
                                  )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                      ;
                    )
                    (statement
                      (assignmentExpression
                        (startExpression
                          (compareExpression
                            (baseExpression (unaryExpression (memberExpression (identifier jar))))
                          )
                        )
                        =
                        (startExpression
                          (compareExpression
                            (baseExpression
                              (unaryExpression
                                (memberExpression
                                  (functionCall (identifier getJavaCompiler) ( argumentList ))
                                  .
                                  (functionCall
                                    (identifier compile)
                                    (
                                    (argumentList
                                      (argument
                                        (startExpression
                                          (compareExpression
                                            (baseExpression (unaryExpression (memberExpression (identifier paths))))
                                          )
                                        )
                                      )
                                      ,
                                      (argument
                                        (startExpression
                                          (compareExpression
                                            (baseExpression
                                              (unaryExpression
                                                (memberExpression
                                                  (functionCall (identifier getURLClassLoader) ( argumentList ))
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                      ,
                                      (argument
                                        (startExpression
                                          (compareExpression
                                            (baseExpression (unaryExpression (memberExpression (identifier jarName))))
                                          )
                                        )
                                      )
                                    )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                      ;
                    )
                    (statement
                      (assignmentExpression
                        (startExpression
                          (compareExpression
                            (baseExpression
                              (unaryExpression (memberExpression (identifier (cfmlFunction file))))
                            )
                          )
                        )
                        =
                        (startExpression
                          (compareExpression
                            (baseExpression
                              (unaryExpression
                                (memberExpression
                                  (functionCall
                                    (identifier createObject)
                                    (
                                    (argumentList
                                      (argument
                                        (startExpression
                                          (compareExpression
                                            (baseExpression
                                              (unaryExpression
                                                (primaryExpression
                                                  (literalExpression (stringLiteral " (stringLiteralPart java) "))
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                      ,
                                      (argument
                                        (startExpression
                                          (compareExpression
                                            (baseExpression
                                              (unaryExpression
                                                (primaryExpression
                                                  (literalExpression (stringLiteral " (stringLiteralPart java.io.File) "))
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                    )
                                  )
                                  .
                                  (functionCall
                                    (identifier init)
                                    (
                                    (argumentList
                                      (argument
                                        (startExpression
                                          (compareExpression
                                            (baseExpression (unaryExpression (memberExpression (identifier jar))))
                                          )
                                        )
                                      )
                                    )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                      ;
                    )
                    (statement
                      (startExpression
                        (compareExpression
                          (baseExpression
                            (unaryExpression
                              (memberExpression
                                (functionCall (identifier getURLClassLoader) ( argumentList ))
                                .
                                (functionCall
                                  (identifier addURL)
                                  (
                                  (argumentList
                                    (argument
                                      (startExpression
                                        (compareExpression
                                          (baseExpression
                                            (unaryExpression
                                              (memberExpression
                                                (identifier (cfmlFunction file))
                                                .
                                                (functionCall (identifier toURL) ( argumentList ))
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                      ;
                    )
                    (statement
                      (ifStatement
                        if
                        (condition
                          (
                          (compareExpression
                            (baseExpression
                              (unaryExpression
                                (memberExpression
                                  (functionCall
                                    (identifier directoryExists)
                                    (
                                    (argumentList
                                      (argument
                                        (startExpression
                                          (compareExpression
                                            (baseExpression (unaryExpression (memberExpression (identifier path))))
                                          )
                                        )
                                      )
                                    )
                                    )
                                  )
                                )
                              )
                            )
                          )
                          )
                        )
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (tagOperatorStatement
                                (cfmlfunctionStatement
                                  (cfmlFunction directory)
                                  (paramStatementAttributes
                                    (param
                                      (multipartIdentifier (identifier action))
                                      =
                                      (startExpression
                                        (compareExpression
                                          (baseExpression
                                            (unaryExpression
                                              (primaryExpression
                                                (literalExpression (stringLiteral " (stringLiteralPart delete) "))
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (param
                                      (multipartIdentifier (identifier recurse))
                                      =
                                      (startExpression
                                        (compareExpression
                                          (baseExpression
                                            (unaryExpression
                                              (primaryExpression
                                                (literalExpression (stringLiteral " (stringLiteralPart true) "))
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (param
                                      (multipartIdentifier (identifier (cfmlFunction directory)))
                                      =
                                      (startExpression
                                        (compareExpression
                                          (baseExpression
                                            (unaryExpression
                                              (primaryExpression
                                                (literalExpression
                                                  (stringLiteral
                                                    "
                                                    #
                                                    (startExpression
                                                      (compareExpression
                                                        (baseExpression (unaryExpression (memberExpression (identifier path))))
                                                      )
                                                    )
                                                    #
                                                    "
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (compoundStatement { })
                                )
                              )
                            )
                            (statement ;)
                            }
                          )
                        )
                      )
                    )
                    (statement
                      (ifStatement
                        if
                        (condition
                          (
                          (compareExpression
                            (baseExpression
                              (unaryExpression
                                (memberExpression
                                  (functionCall
                                    (identifier fileExists)
                                    (
                                    (argumentList
                                      (argument
                                        (startExpression
                                          (compareExpression
                                            (baseExpression (unaryExpression (memberExpression (identifier jar))))
                                          )
                                        )
                                      )
                                    )
                                    )
                                  )
                                )
                              )
                            )
                            (compareExpressionOperator AND)
                            (compareExpression
                              (baseExpression
                                (notExpression
                                  NOT
                                  (startExpression
                                    (compareExpression
                                      (baseExpression
                                        (unaryExpression
                                          (memberExpression (functionCall (identifier isTrustedSource) ( argumentList )))
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                          )
                        )
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (tagOperatorStatement
                                (cfmlfunctionStatement
                                  (cfmlFunction file)
                                  (paramStatementAttributes
                                    (param
                                      (multipartIdentifier (identifier action))
                                      =
                                      (startExpression
                                        (compareExpression
                                          (baseExpression
                                            (unaryExpression
                                              (primaryExpression
                                                (literalExpression (stringLiteral " (stringLiteralPart delete) "))
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (param
                                      (multipartIdentifier (identifier (cfmlFunction file)))
                                      =
                                      (startExpression
                                        (compareExpression
                                          (baseExpression
                                            (unaryExpression
                                              (primaryExpression
                                                (literalExpression
                                                  (stringLiteral
                                                    "
                                                    #
                                                    (startExpression
                                                      (compareExpression
                                                        (baseExpression (unaryExpression (memberExpression (identifier jar))))
                                                      )
                                                    )
                                                    #
                                                    "
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (compoundStatement { })
                                )
                              )
                            )
                            }
                          )
                        )
                      )
                    )
                    }
                  )
                )
                (catchCondition
                  catch
                  (
                  (typeSpec (type any))
                  (identifier e)
                  )
                  (compoundStatement
                    {
                    (statement
                      (ifStatement
                        if
                        (condition
                          (
                          (compareExpression
                            (baseExpression
                              (unaryExpression
                                (memberExpression
                                  (functionCall
                                    (identifier directoryExists)
                                    (
                                    (argumentList
                                      (argument
                                        (startExpression
                                          (compareExpression
                                            (baseExpression (unaryExpression (memberExpression (identifier path))))
                                          )
                                        )
                                      )
                                    )
                                    )
                                  )
                                )
                              )
                            )
                          )
                          )
                        )
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (tagOperatorStatement
                                (cfmlfunctionStatement
                                  (cfmlFunction directory)
                                  (paramStatementAttributes
                                    (param
                                      (multipartIdentifier (identifier action))
                                      =
                                      (startExpression
                                        (compareExpression
                                          (baseExpression
                                            (unaryExpression
                                              (primaryExpression
                                                (literalExpression (stringLiteral " (stringLiteralPart delete) "))
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (param
                                      (multipartIdentifier (identifier recurse))
                                      =
                                      (startExpression
                                        (compareExpression
                                          (baseExpression
                                            (unaryExpression
                                              (primaryExpression
                                                (literalExpression (stringLiteral " (stringLiteralPart true) "))
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (param
                                      (multipartIdentifier (identifier (cfmlFunction directory)))
                                      =
                                      (startExpression
                                        (compareExpression
                                          (baseExpression
                                            (unaryExpression
                                              (primaryExpression
                                                (literalExpression
                                                  (stringLiteral
                                                    "
                                                    #
                                                    (startExpression
                                                      (compareExpression
                                                        (baseExpression (unaryExpression (memberExpression (identifier path))))
                                                      )
                                                    )
                                                    #
                                                    "
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (compoundStatement { })
                                )
                              )
                            )
                            (statement ;)
                            }
                          )
                        )
                      )
                    )
                    (statement (tagOperatorStatement (rethrowStatment rethrow ;)))
                    }
                  )
                )
              )
            )
            }
          )
        )
      )
      }
    )
  )
)
/*======*/