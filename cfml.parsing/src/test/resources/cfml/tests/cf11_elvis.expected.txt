/*===TOKENS===*/
IDENTIFIER               <securityNumber>
'='                      <=>
IDENTIFIER               <securityStruct>
'['                      <[>
OPEN_STRING              <'>
STRING_LITERAL           <Joe>
CLOSE_STRING             <'>
']'                      <]>
'?'                      <?>
':'                      <:>
'-'                      <->
INTEGER_LITERAL          <1>
';'                      <;>
LINE_COMMENT             <// Retrieving from a struct
>
IDENTIFIER               <colourCode>
'='                      <=>
IDENTIFIER               <colourArray>
'['                      <[>
INDEX                    <index>
']'                      <]>
'?'                      <?>
':'                      <:>
OPEN_STRING              <">
STRING_LITERAL           <black>
CLOSE_STRING             <">
';'                      <;>
LINE_COMMENT             <// Retrieving from an array
>
IDENTIFIER               <employeeName>
'='                      <=>
IDENTIFIER               <getEmployeeName>
'('                      <(>
IDENTIFIER               <ID>
')'                      <)>
'?'                      <?>
':'                      <:>
OPEN_STRING              <">
STRING_LITERAL           <Joe>
CLOSE_STRING             <">
';'                      <;>
LINE_COMMENT             <// A function call>
/*===TREE===*/
(scriptBlock
  (element
    (statement
      (assignmentExpression
        (startExpression
          (compareExpression
            (baseExpression
              (unaryExpression (memberExpression (identifier securityNumber)))
            )
          )
        )
        =
        (startExpression
          (compareExpression
            (baseExpression
              (elvisExpression
                (unaryExpression
                  (memberExpression
                    (identifier securityStruct)
                    (arrayMemberExpression
                      [
                      (startExpression
                        (compareExpression
                          (baseExpression
                            (unaryExpression
                              (primaryExpression
                                (literalExpression (stringLiteral ' (stringLiteralPart Joe) '))
                              )
                            )
                          )
                        )
                      )
                      ]
                    )
                  )
                )
                ?
                :
                (baseExpression (unaryExpression - (primaryExpression (literalExpression 1))))
              )
            )
          )
        )
      )
      ;
    )
  )
  (element
    (statement
      (assignmentExpression
        (startExpression
          (compareExpression
            (baseExpression (unaryExpression (memberExpression (identifier colourCode))))
          )
        )
        =
        (startExpression
          (compareExpression
            (baseExpression
              (elvisExpression
                (unaryExpression
                  (memberExpression
                    (identifier colourArray)
                    (arrayMemberExpression
                      [
                      (startExpression
                        (compareExpression
                          (baseExpression
                            (unaryExpression (memberExpression (identifier (cfmlFunction index))))
                          )
                        )
                      )
                      ]
                    )
                  )
                )
                ?
                :
                (baseExpression
                  (unaryExpression
                    (primaryExpression
                      (literalExpression (stringLiteral " (stringLiteralPart black) "))
                    )
                  )
                )
              )
            )
          )
        )
      )
      ;
    )
  )
  (element
    (statement
      (assignmentExpression
        (startExpression
          (compareExpression
            (baseExpression (unaryExpression (memberExpression (identifier employeeName))))
          )
        )
        =
        (startExpression
          (compareExpression
            (baseExpression
              (elvisExpression
                (unaryExpression
                  (memberExpression
                    (functionCall
                      (identifier getEmployeeName)
                      (
                      (argumentList
                        (argument
                          (startExpression
                            (compareExpression
                              (baseExpression (unaryExpression (memberExpression (identifier ID))))
                            )
                          )
                        )
                      )
                      )
                    )
                  )
                )
                ?
                :
                (baseExpression
                  (unaryExpression
                    (primaryExpression
                      (literalExpression (stringLiteral " (stringLiteralPart Joe) "))
                    )
                  )
                )
              )
            )
          )
        )
      )
      ;
    )
  )
)
/*======*/
/*===DECOMPILE===*/
{
securityNumber = securityStruct['Joe'] ?: -1;
colourCode = colourArray[index] ?: 'black';
employeeName = getEmployeeName(ID) ?: 'Joe';

}
/*======*/